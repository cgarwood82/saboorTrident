#####################################################################
##                            Print Control Macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
  {% set target_bed = params.BED|int %}                  # Target bed temperature
  {% set target_extruder = params.EXTRUDER|int %}        # Target nozzle temperature
  {% set target_chamber = params.CHAMBER|int %}        # Target nozzle temperature
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}  # Bed center X
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}  # Bed center Y

  # --- Setup ---
  SET_PIN PIN=case_light VALUE=1                         # Turn on light
  SET_GCODE_OFFSET Z=0                                   # Reset Z offset
  G28                                                    # Home all axes
  G90                                                    # Set to absolute positioning

  # --- Step 1: Heat bed first (blocking) ---
  SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}°C"     # Display bed heating message
  G1 X{x_wait} Y{y_wait} Z15 F9000                       # Move to bed center
  M190 S{target_bed}                                     # Wait for bed to reach target temperature

   # --- Step 2: Start chamber heater (non-blocking) ---
  {% if target_chamber > 0 %}
    SET_DISPLAY_TEXT MSG="Starting Chamber Heater: {target_chamber}°C"
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={target_chamber}
  {% endif %}

  # --- Step 3: Level the bed and find z offset ---
  TANGO_TIME
  
  # --- Step 4: Heat nozzle (blocking) ---
  SET_DISPLAY_TEXT MSG="Heating Nozzle: {target_extruder}°C" # Display nozzle heating message
  # G1 X{x_wait} Y{y_wait} Z15 F9000                       # Move to bed center
  G0 X{x_wait - 50} Y4 F10000                            # Move to primeline start point
  M109 S{target_extruder}                                # Heat nozzle to target temperature

  # --- Step 5: Begin print prep / purge line ---
  SET_DISPLAY_TEXT MSG="Preparing to Print..."           # Display preparation message
#  G0 X{x_wait - 50} Y4 F10000                            # Move to primeline start point
  G0 Z0.4                                                # Raise Z to 0.4mm
  G91                                                    # Switch to relative positioning
  G1 X100 E20 F1000                                      # Extrude primeline
  G90                                                    # Switch back to absolute positioning

  SET_DISPLAY_TEXT MSG="Printing..."                     # Display printing message

#--------------------------------------------------------------------
[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set x_center = th.axis_maximum.x // 2 %}
    {% set y_front = (th.axis_minimum.y if th.axis_minimum.y is defined else 0) + 2 %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400
    G92 E0
    # G1 E-20.0 F3600

    TURN_OFF_HEATERS

    G90
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000        ; quick wipe to reduce stringing
    G0 X{x_center} Y{y_front} F3600                ; park at front (easy booger cleanup)

    M107
    SET_FAN_SPEED FAN=fan0 SPEED=0
    SET_FAN_SPEED FAN=fan2 SPEED=0
    SET_FAN_SPEED FAN=fan3 SPEED=0

    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

    SET_PIN PIN=case_light VALUE=0           ; Turn off light

#--------------------------------------------------------------------
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
SAVE_GCODE_STATE NAME=PAUSE_STATE
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}

  ##### fixed park location #####
  {% set y_min = (printer.toolhead.axis_minimum.y|float) if printer.toolhead.axis_minimum is defined else 0.0 %}
  {% set y_park = y_min + 2.0 %}
  {% set x_park = 325.0 %}

  ##### calculate safe Z lift #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 2.0 if act_z < (max_z - 2.0) else (max_z - act_z) %}

  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

  PAUSE_BASE

#--------------------------------------------------------------------
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {% else %}
    {% set get_params = "" %}
  {% endif %}

  # small Z hop before unretract (if homed)
  {% if "z" in printer.toolhead.homed_axes %}
    G91
    G1 Z0.5 F1200
    G90
  {% endif %}

  # unretract if hot
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough for unretract")}
  {% endif %}

  # Restore printer state (position, speed, mode) saved at pause
  RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=0

  RESUME_BASE {get_params}

#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    SAVE_GCODE_STATE NAME=CANCEL_STATE

    {% set y_min = (printer.toolhead.axis_minimum.y|float) if printer.toolhead.axis_minimum is defined else 0.0 %}
    {% set y_park = y_min + 2.0 %}
    {% set x_park = 325.0 %}

    M400
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E-1.0 F2100
    {% endif %}

    {% if "xyz" in printer.toolhead.homed_axes and printer['gcode_macro CANCEL_PRINT'].park %}
      # 1) small safe lift
      G91
      G1 Z2 F1200

      # 2) park at front-right safe spot
      G90
      G1 X{x_park} Y{y_park} F6000

      # 3) lower the bed up to 150mm without hitting Z max
      {% set max_z = printer.toolhead.axis_maximum.z|float %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% set z_room = (max_z - act_z) %}
      {% set z_drop = 150.0 if z_room > 150.0 else (z_room if z_room > 0 else 0.0) %}
      {% if z_drop > 0 %}
        G91
        G1 Z{z_drop} F1200
        G90
      {% else %}
        {action_respond_info("Cancel: no Z room to lower bed further")}
      {% endif %}
    {% else %}
      {action_respond_info("Cancel: not homed or parking disabled; skipping moves")}
    {% endif %}

    TURN_OFF_HEATERS
    M107
    SET_FAN_SPEED FAN=fan0 SPEED=0
    SET_FAN_SPEED FAN=fan2 SPEED=0
    SET_FAN_SPEED FAN=fan3 SPEED=0
    BED_MESH_CLEAR

    CANCEL_PRINT_BASE

    RESTORE_GCODE_STATE NAME=CANCEL_STATE MOVE=0

#--------------------------------------------------------------------
[gcode_macro PAUSE_ON_ENTRY_RUNOUT]
description: Pause and park due to entry filament sensor trigger
gcode:
  {action_respond_info("Entry filament sensor triggered; pausing print")}
  PAUSE
