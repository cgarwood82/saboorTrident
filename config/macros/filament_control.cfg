[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
description: Cut at corner then retract filament up (no purge)
variable_unload_distance: 50
variable_pre_retract: 0.8
gcode:
  {% set speed = params.SPEED|default(300)|int %}
  {% set max_velocity = (printer.configfile.settings.extruder.max_extrude_only_velocity * 60)|int %}
  {% set unload = printer["gcode_macro UNLOAD_FILAMENT"].unload_distance|float %}
  {% set pre = printer["gcode_macro UNLOAD_FILAMENT"].pre_retract|float %}
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|float %}
  {% set cur_temp = printer.extruder.temperature|float %}
  {% set cur_i = cur_temp|int %}
  {% set min_i = min_temp|int %}
  {% set pre_s = "%.3f"|format(pre) %}
  {% set unload_s = "%.3f"|format(unload) %}

  {% if cur_temp < min_temp %}
    {action_raise_error("Extruder too cold to unload (" ~ cur_i ~ " < " ~ min_i ~ " C). Heat first.")}
  {% endif %}

  SAVE_GCODE_STATE NAME=unload_state
  G90
  M83

  {% if pre > 0 %}
    G1 E-{pre_s} F{speed}
  {% endif %}

  CUT_FILAMENT

  G1 E-{unload_s} F{max_velocity}

  RESTORE_GCODE_STATE NAME=unload_state
  {action_respond_info("Unload complete (cut + retract " ~ unload_s ~ " mm).")}


[gcode_macro CUT_FILAMENT]
description: Press into corner cutter and snip filament, then park safely
# === tunables ===
variable_cx: 7
variable_cy: 352
variable_press_x: -2
variable_passes: 2
variable_fast_f: 10000
variable_press_f: 5000
variable_z_safe: 2.0
variable_safe_x: 10
variable_safe_y: 340
gcode:
  {% set cx = printer["gcode_macro CUT_FILAMENT"].cx|float %}
  {% set cy = printer["gcode_macro CUT_FILAMENT"].cy|float %}
  {% set press_x = printer["gcode_macro CUT_FILAMENT"].press_x|float %}
  {% set passes = printer["gcode_macro CUT_FILAMENT"].passes|int %}
  {% set vfast = printer["gcode_macro CUT_FILAMENT"].fast_f|int %}
  {% set vpress = printer["gcode_macro CUT_FILAMENT"].press_f|int %}
  {% set zsafe = printer["gcode_macro CUT_FILAMENT"].z_safe|float %}
  {% set sx = printer["gcode_macro CUT_FILAMENT"].safe_x|float %}
  {% set sy = printer["gcode_macro CUT_FILAMENT"].safe_y|float %}
  {% set pos_min = printer.configfile.settings.stepper_x.position_min|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_raise_error("Home XYZ before CUT_FILAMENT")}
  {% endif %}

  {% if pos_min > press_x %}
    {action_raise_error("stepper_x position_min must be <= press_x")}
  {% endif %}

  {% set cx_s = "%.2f"|format(cx) %}
  {% set cy_s = "%.2f"|format(cy) %}
  {% set press_s = "%.2f"|format(press_x) %}
  {% set zsafe_s = "%.2f"|format(zsafe) %}
  {% set sx_s = "%.2f"|format(sx) %}
  {% set sy_s = "%.2f"|format(sy) %}

  SAVE_GCODE_STATE NAME=CUT_STATE
  G90

  {% if printer.toolhead.position.z < zsafe %}
    G1 Z{zsafe_s} F{vfast}
  {% endif %}

  G1 Y{cy_s} F{vfast}
  G1 X{cx_s} F{vfast}

  {% for i in range(passes) %}
    G1 X{press_s} F{vpress}
    G4 P100
    G1 X{cx_s} F{vfast}
    G4 P100
  {% endfor %}

  G1 X{sx_s} Y{sy_s} F{vfast}

  RESTORE_GCODE_STATE NAME=CUT_STATE MOVE=0
  {action_respond_info("Cut routine complete and parked")}
